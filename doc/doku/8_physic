Das Physikmodul besteht zum einen aus den Körperklassen, welche alle von der Klasse <Solid erben, und zum anderen aus der Klasse <Physiccore. Die Klasse <Solid speichert die Ankerpunkte, den Typ, die Masse, die Koordinaten und die angreifenden Kräfte des Körpers. Außerdem wird jeder Körper mit einer ID versehen, welche auch in der Klasse Solid gespeichert wird. In der Funktion <draft() dieser Klasse wird auch beschrieben wie der Körper und die angreifenden Kräfte gezeichnet werden. Diese Funktion wird in den erbenden Klassen überschrieben. Die Klasse <Anchor enthält Informationen über den Ort des Ankerpunktes und den Erdungszustand. Außerdem enthält sie einen Pointer auf den zugehörigen Körper und den verknüpften Körper. Die Klasse <Physiccore erbt von <TSingleton und speichert alle erstellten Körper in einem Vektor aus der Standardbibliothek von C++. Sie erstellt und speichert außerdem die Variablen und das zu lösende Gleichungssystem (<EquationSystem) aus dem Mathemodul. Die Klasse enthält viele Funktionen zum Manipulieren der gespeicherten Daten. Diese Funktionen werden in der oben genannten Klasse <Brush, nach Verarbeitung der <SDL_Events in der Klasse <Framework, angestoßen.
Eine typische Funktion dafür ist das Erden von Ankerpunkten.

Es existieren noch Fehler die teilweise sogar zu Programmabstürzen führen und vielleicht auf das Physikmodul zurückgeführt werden können.
Zurzeit wird das Gleichungssystem so aufgestellt, dass es nur zu einer sinnvollen Lösung kommt, wenn ein stabiles System konstruiert wird. Falls ein unstabiles System konstruiert wird, wird es trozdem so berechnet, als ob die Summe aller Kräfte und die Summe aller Drehmomente gleich null wäre. Durch Hinzunahme einer variablen, resultierenden Kraft in das Gleichungssystem, könnte die Lösung von unstabilen Systemen sinnvoller werden, da sich die Änderung des Systems in dieser Kraft verdeutlichen könnte. Die Herausforderung besteht dabei darin diese Kraft an einem geschickt gewählten Punkt angreifen zu lassen. Außerdem lässt sich in manchen Fällen sogar bestimmen in welche Richtung diese Kraft zeigen würde. Diese Implementierung wurde leider aus zeitlichen Gründen nicht mehr integriert.

//Eigennamen kenntlich machen <(kursiv/fett)
